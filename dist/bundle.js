(()=>{"use strict";var n={620:(n,e,t)=>{t.d(e,{Z:()=>m});var o=t(537),r=t.n(o),a=t(645),s=t.n(a),i=t(667),c=t.n(i),p=new URL(t(75),t.b),l=new URL(t(638),t.b),d=s()(r()),A=c()(p),u=c()(l);d.push([n.id,`@layer base {\n  @font-face {\n    font-family: "Josefin Sans";\n    src: url(${A}) format("ttf"),\n      url(${u}) format("ttf");\n    font-weight: 600;\n    font-style: normal;\n  }\n\n  :root {\n    --primary: brown;\n    --secondary: lightbrown;\n    --tertiary: yellow;\n\n    --sm-gap: 10px;\n    --m-gap: 20px;\n    --l-gap: 30px;\n\n    --sm-br: 5px;\n\n    --clip: polygon(\n      10% 0,\n      90% 0,\n      100% 20%,\n      100% 80%,\n      90% 100%,\n      10% 100%,\n      0 80%,\n      0 20%\n    );\n  }\n\n  *,\n  *::before,\n  *::after {\n    box-sizing: border-box;\n  }\n\n  body {\n    font-family: "Josefin Sans", system-ui, sans-serif;\n    background-color: var(--primary);\n    color: var(--primary-contrast);\n    margin: 0;\n  }\n\n  input,\n  textarea,\n  button,\n  select {\n    font: inherit;\n    font-size: 100%;\n  }\n}\n`,"",{version:3,sources:["webpack://./src/css-components/base.css"],names:[],mappings:"AAAA;EACE;IACE,2BAA2B;IAC3B;2DACsE;IACtE,gBAAgB;IAChB,kBAAkB;EACpB;;EAEA;IACE,gBAAgB;IAChB,uBAAuB;IACvB,kBAAkB;;IAElB,cAAc;IACd,aAAa;IACb,aAAa;;IAEb,YAAY;;IAEZ;;;;;;;;;KASC;EACH;;EAEA;;;IAGE,sBAAsB;EACxB;;EAEA;IACE,kDAAkD;IAClD,gCAAgC;IAChC,8BAA8B;IAC9B,SAAS;EACX;;EAEA;;;;IAIE,aAAa;IACb,eAAe;EACjB;AACF",sourcesContent:['@layer base {\n  @font-face {\n    font-family: "Josefin Sans";\n    src: url(../fonts/JosefinSans-VariableFont_wght.ttf) format("ttf"),\n      url(../fonts/JosefinSans-Italic-VariableFont_wght.ttf) format("ttf");\n    font-weight: 600;\n    font-style: normal;\n  }\n\n  :root {\n    --primary: brown;\n    --secondary: lightbrown;\n    --tertiary: yellow;\n\n    --sm-gap: 10px;\n    --m-gap: 20px;\n    --l-gap: 30px;\n\n    --sm-br: 5px;\n\n    --clip: polygon(\n      10% 0,\n      90% 0,\n      100% 20%,\n      100% 80%,\n      90% 100%,\n      10% 100%,\n      0 80%,\n      0 20%\n    );\n  }\n\n  *,\n  *::before,\n  *::after {\n    box-sizing: border-box;\n  }\n\n  body {\n    font-family: "Josefin Sans", system-ui, sans-serif;\n    background-color: var(--primary);\n    color: var(--primary-contrast);\n    margin: 0;\n  }\n\n  input,\n  textarea,\n  button,\n  select {\n    font: inherit;\n    font-size: 100%;\n  }\n}\n'],sourceRoot:""}]);const m=d},801:(n,e,t)=>{t.d(e,{Z:()=>i});var o=t(537),r=t.n(o),a=t(645),s=t.n(a)()(r());s.push([n.id,"@layer component {\n  .desc {\n    padding: var(--sm-gap) calc(2 * var(--l-gap));\n  }\n\n  .desc dd {\n    margin-bottom: var(--sm-gap);\n    font-weight: bold;\n    letter-spacing: 1.2px;\n  }\n}\n","",{version:3,sources:["webpack://./src/css-components/descList.css"],names:[],mappings:"AAAA;EACE;IACE,6CAA6C;EAC/C;;EAEA;IACE,4BAA4B;IAC5B,iBAAiB;IACjB,qBAAqB;EACvB;AACF",sourcesContent:["@layer component {\n  .desc {\n    padding: var(--sm-gap) calc(2 * var(--l-gap));\n  }\n\n  .desc dd {\n    margin-bottom: var(--sm-gap);\n    font-weight: bold;\n    letter-spacing: 1.2px;\n  }\n}\n"],sourceRoot:""}]);const i=s},458:(n,e,t)=>{t.d(e,{Z:()=>i});var o=t(537),r=t.n(o),a=t(645),s=t.n(a)()(r());s.push([n.id,'@layer component {\n  #content {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    gap: calc(3 * var(--l-gap));\n  }\n\n  #content > * {\n    position: relative;\n  }\n\n  #content > *::before {\n    content: "";\n    background-color: red;\n    position: absolute;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    clip-path: var(--clip);\n    z-index: -1;\n  }\n\n  #content > *::after {\n    content: "";\n    background-color: yellow;\n    position: absolute;\n    top: -20px;\n    right: -20px;\n    bottom: -20px;\n    left: -20px;\n    clip-path: var(--clip);\n    z-index: -2;\n  }\n\n  #content > *:last-child {\n    margin-bottom: calc(2 * var(--l-gap));\n  }\n}\n',"",{version:3,sources:["webpack://./src/css-components/main.css"],names:[],mappings:"AAAA;EACE;IACE,aAAa;IACb,sBAAsB;IACtB,mBAAmB;IACnB,2BAA2B;EAC7B;;EAEA;IACE,kBAAkB;EACpB;;EAEA;IACE,WAAW;IACX,qBAAqB;IACrB,kBAAkB;IAClB,MAAM;IACN,QAAQ;IACR,SAAS;IACT,OAAO;IACP,sBAAsB;IACtB,WAAW;EACb;;EAEA;IACE,WAAW;IACX,wBAAwB;IACxB,kBAAkB;IAClB,UAAU;IACV,YAAY;IACZ,aAAa;IACb,WAAW;IACX,sBAAsB;IACtB,WAAW;EACb;;EAEA;IACE,qCAAqC;EACvC;AACF",sourcesContent:['@layer component {\n  #content {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    gap: calc(3 * var(--l-gap));\n  }\n\n  #content > * {\n    position: relative;\n  }\n\n  #content > *::before {\n    content: "";\n    background-color: red;\n    position: absolute;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    clip-path: var(--clip);\n    z-index: -1;\n  }\n\n  #content > *::after {\n    content: "";\n    background-color: yellow;\n    position: absolute;\n    top: -20px;\n    right: -20px;\n    bottom: -20px;\n    left: -20px;\n    clip-path: var(--clip);\n    z-index: -2;\n  }\n\n  #content > *:last-child {\n    margin-bottom: calc(2 * var(--l-gap));\n  }\n}\n'],sourceRoot:""}]);const i=s},155:(n,e,t)=>{t.d(e,{Z:()=>i});var o=t(537),r=t.n(o),a=t(645),s=t.n(a)()(r());s.push([n.id,"@layer component {\n  #nav ul {\n    list-style-type: none;\n    padding: 0;\n    display: flex;\n    justify-content: center;\n  }\n}\n","",{version:3,sources:["webpack://./src/css-components/nav.css"],names:[],mappings:"AAAA;EACE;IACE,qBAAqB;IACrB,UAAU;IACV,aAAa;IACb,uBAAuB;EACzB;AACF",sourcesContent:["@layer component {\n  #nav ul {\n    list-style-type: none;\n    padding: 0;\n    display: flex;\n    justify-content: center;\n  }\n}\n"],sourceRoot:""}]);const i=s},282:(n,e,t)=>{t.d(e,{Z:()=>i});var o=t(537),r=t.n(o),a=t(645),s=t.n(a)()(r());s.push([n.id,"@layer component {\n  .primary-heading {\n    background-color: yellow;\n    width: fit-content;\n    padding: var(--sm-gap) var(--l-gap);\n  }\n}\n","",{version:3,sources:["webpack://./src/css-components/primary-heading.css"],names:[],mappings:"AAAA;EACE;IACE,wBAAwB;IACxB,kBAAkB;IAClB,mCAAmC;EACrC;AACF",sourcesContent:["@layer component {\n  .primary-heading {\n    background-color: yellow;\n    width: fit-content;\n    padding: var(--sm-gap) var(--l-gap);\n  }\n}\n"],sourceRoot:""}]);const i=s},527:(n,e,t)=>{t.d(e,{Z:()=>i});var o=t(537),r=t.n(o),a=t(645),s=t.n(a)()(r());s.push([n.id,"@layer component {\n  .review {\n    position: relative;\n    max-width: 60ch;\n    padding: var(--l-gap);\n  }\n\n  .review img {\n    position: absolute;\n    top: -25%;\n    right: 50%;\n    transform: translateX(50%);\n  }\n}\n","",{version:3,sources:["webpack://./src/css-components/review-article.css"],names:[],mappings:"AAAA;EACE;IACE,kBAAkB;IAClB,eAAe;IACf,qBAAqB;EACvB;;EAEA;IACE,kBAAkB;IAClB,SAAS;IACT,UAAU;IACV,0BAA0B;EAC5B;AACF",sourcesContent:["@layer component {\n  .review {\n    position: relative;\n    max-width: 60ch;\n    padding: var(--l-gap);\n  }\n\n  .review img {\n    position: absolute;\n    top: -25%;\n    right: 50%;\n    transform: translateX(50%);\n  }\n}\n"],sourceRoot:""}]);const i=s},353:(n,e,t)=>{t.d(e,{Z:()=>i});var o=t(537),r=t.n(o),a=t(645),s=t.n(a)()(r());s.push([n.id,"@layer component {\n  .treehouse-img {\n    width: 100px;\n  }\n}\n","",{version:3,sources:["webpack://./src/css-components/treehouse.css"],names:[],mappings:"AAAA;EACE;IACE,YAAY;EACd;AACF",sourcesContent:["@layer component {\n  .treehouse-img {\n    width: 100px;\n  }\n}\n"],sourceRoot:""}]);const i=s},426:(n,e,t)=>{t.d(e,{Z:()=>f});var o=t(537),r=t.n(o),a=t(645),s=t.n(a),i=t(620),c=t(353),p=t(155),l=t(458),d=t(282),A=t(527),u=t(801),m=s()(r());m.i(i.Z),m.i(c.Z),m.i(p.Z),m.i(l.Z),m.i(d.Z),m.i(A.Z),m.i(u.Z),m.push([n.id,"@layer component, page, base;\n","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA,4BAA4B",sourcesContent:["@layer component, page, base;\n\n@import url(./css-components/base.css);\n@import url(./css-components/treehouse.css);\n@import url(./css-components/nav.css);\n@import url(./css-components/main.css);\n@import url(./css-components/primary-heading.css);\n@import url(./css-components/review-article.css);\n@import url(./css-components/descList.css);\n"],sourceRoot:""}]);const f=m},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",o=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),o&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),o&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,o,r,a){"string"==typeof n&&(n=[[null,n,void 0]]);var s={};if(o)for(var i=0;i<this.length;i++){var c=this[i][0];null!=c&&(s[c]=!0)}for(var p=0;p<n.length;p++){var l=[].concat(n[p]);o&&s[l[0]]||(void 0!==a&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=a),t&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=t):l[2]=t),r&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=r):l[4]="".concat(r)),e.push(l))}},e}},667:n=>{n.exports=function(n,e){return e||(e={}),n?(n=String(n.__esModule?n.default:n),/^['"].*['"]$/.test(n)&&(n=n.slice(1,-1)),e.hash&&(n+=e.hash),/["'() \t\n]|(%20)/.test(n)||e.needQuotes?'"'.concat(n.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):n):n}},537:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),a="/*# ".concat(r," */");return[e].concat([a]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,o=0;o<e.length;o++)if(e[o].identifier===n){t=o;break}return t}function o(n,o){for(var a={},s=[],i=0;i<n.length;i++){var c=n[i],p=o.base?c[0]+o.base:c[0],l=a[p]||0,d="".concat(p," ").concat(l);a[p]=l+1;var A=t(d),u={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==A)e[A].references++,e[A].updater(u);else{var m=r(u,o);o.byIndex=i,e.splice(i,0,{identifier:d,updater:m,references:1})}s.push(d)}return s}function r(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,r){var a=o(n=n||[],r=r||{});return function(n){n=n||[];for(var s=0;s<a.length;s++){var i=t(a[s]);e[i].references--}for(var c=o(n,r),p=0;p<a.length;p++){var l=t(a[p]);0===e[l].references&&(e[l].updater(),e.splice(l,1))}a=c}}},569:n=>{var e={};n.exports=function(n,t){var o=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var o="";t.supports&&(o+="@supports (".concat(t.supports,") {")),t.media&&(o+="@media ".concat(t.media," {"));var r=void 0!==t.layer;r&&(o+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),o+=t.css,r&&(o+="}"),t.media&&(o+="}"),t.supports&&(o+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleTagTransform(o,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}},638:(n,e,t)=>{n.exports=t.p+"d96bb2f98cb3d0d8ee06.ttf"},75:(n,e,t)=>{n.exports=t.p+"613585db06f849ca7717.ttf"}},e={};function t(o){var r=e[o];if(void 0!==r)return r.exports;var a=e[o]={id:o,exports:{}};return n[o](a,a.exports,t),a.exports}t.m=n,t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var o in e)t.o(e,o)&&!t.o(n,o)&&Object.defineProperty(n,o,{enumerable:!0,get:e[o]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"==typeof window)return window}}(),t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),(()=>{var n;t.g.importScripts&&(n=t.g.location+"");var e=t.g.document;if(!n&&e&&(e.currentScript&&(n=e.currentScript.src),!n)){var o=e.getElementsByTagName("script");if(o.length)for(var r=o.length-1;r>-1&&!n;)n=o[r--].src}if(!n)throw new Error("Automatic publicPath is not supported in this browser");n=n.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=n})(),t.b=document.baseURI||self.location.href,t.nc=void 0,(()=>{var n=t(379),e=t.n(n),o=t(795),r=t.n(o),a=t(569),s=t.n(a),i=t(565),c=t.n(i),p=t(216),l=t.n(p),d=t(589),A=t.n(d),u=t(426),m={};m.styleTagTransform=A(),m.setAttributes=c(),m.insert=s().bind(null,"head"),m.domAPI=r(),m.insertStyleElement=l(),e()(u.Z,m),u.Z&&u.Z.locals&&u.Z.locals;const f=t.p+"2837dbb861ebf055c588.png",h=(n="div",e="")=>{const t=document.createElement(n);return e&&t.classList.add(e),t},g=(n,e="p",t="")=>{const o=document.createElement(e);return t&&o.classList.add(t),o.textContent=n,o},C=(n,e="")=>{const t=document.createElement("img");return t.src=n,e&&t.classList.add(e),t},y=(n,e,t)=>{const o=document.createElement("span");o.textContent=`${n}: `;const r=document.createElement("a");return r.textContent=t,"tel"===e?r.href="tel:"+t:"email"===e&&(r.href="mailto:"+t),o.appendChild(r),o},v=n=>n[0].toUpperCase()+n.substring(1).toLowerCase(),b=function(n){const e=h("address");for(const t in n){const o=v(t);switch(t){case"title":const r=g(n[t],"h2");e.appendChild(r);break;case"city":case"state":case"zip":case"role":const a=g(`${o}: ${n[t]}`,"p");e.appendChild(a);break;case"tel":case"email":const s=y(o,t,n[t]);e.appendChild(s)}}return e},B=function(n){const e=g("Andy's Acorntastic Appetizers","h1","primary-heading");n.appendChild(e);const t=function(n,e,t=null){const o=h("article","review");if(null!==t){const n=C(t,"treehouse-img");o.appendChild(n)}const r=g(e);o.appendChild(r);const a=h("footer"),s=g(n,"cite");return a.appendChild(s),o.appendChild(a),o}("Adam","Andy's with their own homebrewed syrup has the best pancakes around! \n  The atmosphere and customer service make you feel like you are sitting\n  in the middle of the woods, gorging on nuts like a squirrel! \n  This is exactly the kind of place that I like to return to again and again.",f);n.appendChild(t);const o=function(n,e){const t=h("div","desc"),o=g(n,"h2"),r=h("dl");for(const n in e){const t=g(v(n),"dt"),o=g(e[n],"dd");r.append(t,o)}return t.append(o,r),t}("Opening Hours",{monday:"8am - 8pm",tuesday:"6am - 6pm",wednesday:"6am - 6pm",thursday:"6am - 10pm",friday:"9am - 11pm",saturday:"10am - 11pm",sunday:"10am - 11pm"});n.appendChild(o);const r=h("footer"),a=b({title:"Location",city:"Anytown",state:"Toronto",zip:12345,tel:98765432,email:"john.doe@example.com"});r.appendChild(a),n.appendChild(r)},E=function(n){const e=g("Menu","h1","primary-heading");n.appendChild(e),function(n){const e=[];for(const t in n){const o=h("section",t),r=g(v(t),"h2");o.appendChild(r),n[t].forEach((n=>{const e=h("article"),t=g(n.title,"h3"),r=g(n.desc),a=g(n.price);e.append(t,r,a),o.appendChild(e)})),e.push(o)}return e}({beverages:[{title:"HoneyAcorn Tea",desc:"A cozy and sweet tea crafted with premium syrup, honey, and a hint of lemon to kickstart your day on a delightful note!",price:"$1.25"},{title:"Berry Tea",desc:"A soothing tea, rich and satisfying, infused with a blend of various berry flavors. Ideal when served chilled, though a warm serving is available upon request.",price:"$2"}],sides:[{title:"Jam & Toast",desc:"A slice of toast with your preferred choice of bread, accompanied by our homemade blackberry or raspberry jam.",price:"$1"},{title:"Fresh Fruit",desc:"A small bowl of fresh fruit, whatever we find at the market for the day.",price:"$3"}],mains:[{title:"Acorn Squash Stuffed with Wild Rice and Nuts",desc:"Roasted acorn squash halves filled with a savory mixture of wild rice, chopped nuts, dried fruits, and herbs.",price:"$5"},{title:"Acorn-Crusted Chicken Tenders",desc:"Chicken tenders coated in a batter made from acorn flour, seasoned with herbs, and baked or fried until crispy.",price:"$10"},{title:"Hazelnut-Crusted Trout",desc:"Trout fillets coated in crushed hazelnuts and herbs, pan-seared to perfection, and served with an acorn-based sauce.",price:"$20"},{title:"Acorn Gnocchi with Brown Butter Sage Sauce",desc:"Homemade acorn flour gnocchi served in a nutty brown butter and sage sauce, sprinkled with grated Parmesan cheese.",price:"$15"},{title:"Walnut-Crusted Salmon",desc:"Combines the richness of salmon with the nutty crunch of walnuts and the tangy-sweet flavors of mustard and honey.",price:"$50"}]}).forEach((e=>{n.appendChild(e)}))},w=document.querySelector("#content"),I=document.querySelector("#nav"),x=document.querySelectorAll("#nav button");I.addEventListener("click",(n=>{if("BUTTON"===n.target.tagName){const e=n.target,t=e.id;x.forEach((n=>{n.classList.remove("active")})),e.classList.add("active"),w.innerHTML="","home"===t&&B(w),"menu"===t&&E(w),"contact"===t&&function(n){const e=g("Contact","h1","primary-heading");n.appendChild(e);const t=h("section");[{title:"Mama Squirrel",role:"Manager",tel:5555555554,email:"totallyRealEmail@notFake.com"},{title:"Papa Squirrel",role:"Chef",tel:5555555555,email:"perfectlyRealEmail@notFake.com"}].forEach((n=>{const e=b(n);t.appendChild(e)})),n.appendChild(t)}(w)}})),B(w)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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ZS8uL3NyYy9jc3MtY29tcG9uZW50cy9iYXNlLmNzcyIsIndlYnBhY2s6Ly93ZWJwYWNrLXJlc3RhdXJhbnQtcGFnZS8uL3NyYy9jc3MtY29tcG9uZW50cy9kZXNjTGlzdC5jc3MiLCJ3ZWJwYWNrOi8vd2VicGFjay1yZXN0YXVyYW50LXBhZ2UvLi9zcmMvY3NzLWNvbXBvbmVudHMvbWFpbi5jc3MiLCJ3ZWJwYWNrOi8vd2VicGFjay1yZXN0YXVyYW50LXBhZ2UvLi9zcmMvY3NzLWNvbXBvbmVudHMvbmF2LmNzcyIsIndlYnBhY2s6Ly93ZWJwYWNrLXJlc3RhdXJhbnQtcGFnZS8uL3NyYy9jc3MtY29tcG9uZW50cy9wcmltYXJ5LWhlYWRpbmcuY3NzIiwid2VicGFjazovL3dlYnBhY2stcmVzdGF1cmFudC1wYWdlLy4vc3JjL2Nzcy1jb21wb25lbnRzL3Jldmlldy1hcnRpY2xlLmNzcyIsIndlYnBhY2s6Ly93ZWJwYWNrLXJlc3RhdXJhbnQtcGFnZS8uL3NyYy9jc3MtY29tcG9uZW50cy90cmVlaG91c2UuY3NzIiwid2VicGFjazovL3dlYnBhY2stcmVzdGF1cmFudC1wYWdlLy4vc3JjL3N0eWxlLmNzcyIsIndlYnBhY2s6Ly93ZWJwYWNrLXJlc3RhdXJhbnQtcGFnZS8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanMiLCJ3ZWJwYWNrOi8vd2VicGFjay1yZXN0YXVyYW50LXBhZ2UvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvZ2V0VXJsLmpzIiwid2VicGFjazovL3dlYnBhY2stcmVzdGF1cmFudC1wYWdlLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanMiLCJ3ZWJwYWNrOi8vd2VicGFjay1yZXN0YXVyYW50LXBhZ2UvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanMiLCJ3ZWJwYWNrOi8vd2VicGFjay1yZXN0YXVyYW50LXBhZ2UvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzIiwid2VicGFjazovL3dlYnBhY2stcmVzdGF1cmFudC1wYWdlLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzIiwid2VicGFjazovL3dlYnBhY2stcmVzdGF1cmFudC1wYWdlLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzIiwid2VicGFjazovL3dlYnBhY2stcmVzdGF1cmFudC1wYWdlLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanMiLCJ3ZWJwYWNrOi8vd2VicGFjay1yZXN0YXVyYW50LXBhZ2UvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrLXJlc3RhdXJhbnQtcGFnZS93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly93ZWJwYWNrLXJlc3RhdXJhbnQtcGFnZS93ZWJwYWNrL3J1bnRpbWUvY29tcGF0IGdldCBkZWZhdWx0IGV4cG9ydCIsIndlYnBhY2s6Ly93ZWJwYWNrLXJlc3RhdXJhbnQtcGFnZS93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vd2VicGFjay1yZXN0YXVyYW50LXBhZ2Uvd2VicGFjay9ydW50aW1lL2dsb2JhbCIsIndlYnBhY2s6Ly93ZWJwYWNrLXJlc3RhdXJhbnQtcGFnZS93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL3dlYnBhY2stcmVzdGF1cmFudC1wYWdlL3dlYnBhY2svcnVudGltZS9wdWJsaWNQYXRoIiwid2VicGFjazovL3dlYnBhY2stcmVzdGF1cmFudC1wYWdlL3dlYnBhY2svcnVudGltZS9qc29ucCBjaHVuayBsb2FkaW5nIiwid2VicGFjazovL3dlYnBhY2stcmVzdGF1cmFudC1wYWdlL3dlYnBhY2svcnVudGltZS9ub25jZSIsIndlYnBhY2s6Ly93ZWJwYWNrLXJlc3RhdXJhbnQtcGFnZS8uL3NyYy9zdHlsZS5jc3M/NzE2MyIsIndlYnBhY2s6Ly93ZWJwYWNrLXJlc3RhdXJhbnQtcGFnZS8uL3NyYy9qcy1jb21wb25lbnRzL0VsZW1lbnRGYWN0b3J5LmpzIiwid2VicGFjazovL3dlYnBhY2stcmVzdGF1cmFudC1wYWdlLy4vc3JjL2pzLWNvbXBvbmVudHMvU3RyaW5nSGVscGVyLmpzIiwid2VicGFjazovL3dlYnBhY2stcmVzdGF1cmFudC1wYWdlLy4vc3JjL2pzLWNvbXBvbmVudHMvY3JlYXRlQWRkcmVzcy5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrLXJlc3RhdXJhbnQtcGFnZS8uL3NyYy9qcy1jb21wb25lbnRzL3JlbmRlckhvbWUuanMiLCJ3ZWJwYWNrOi8vd2VicGFjay1yZXN0YXVyYW50LXBhZ2UvLi9zcmMvanMtY29tcG9uZW50cy9jcmVhdGVSZXZpZXdBcnRpY2xlLmpzIiwid2VicGFjazovL3dlYnBhY2stcmVzdGF1cmFudC1wYWdlLy4vc3JjL2pzLWNvbXBvbmVudHMvY3JlYXRlRGVzY0xpc3QuanMiLCJ3ZWJwYWNrOi8vd2VicGFjay1yZXN0YXVyYW50LXBhZ2UvLi9zcmMvanMtY29tcG9uZW50cy9yZW5kZXJNZW51LmpzIiwid2VicGFjazovL3dlYnBhY2stcmVzdGF1cmFudC1wYWdlLy4vc3JjL2pzLWNvbXBvbmVudHMvY3JlYXRlTWVudS5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrLXJlc3RhdXJhbnQtcGFnZS8uL3NyYy9pbmRleC5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrLXJlc3RhdXJhbnQtcGFnZS8uL3NyYy9qcy1jb21wb25lbnRzL3JlbmRlckNvbnRhY3QuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2dldFVybC5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8wX19fID0gbmV3IFVSTChcIi4uL2ZvbnRzL0pvc2VmaW5TYW5zLVZhcmlhYmxlRm9udF93Z2h0LnR0ZlwiLCBpbXBvcnQubWV0YS51cmwpO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8xX19fID0gbmV3IFVSTChcIi4uL2ZvbnRzL0pvc2VmaW5TYW5zLUl0YWxpYy1WYXJpYWJsZUZvbnRfd2dodC50dGZcIiwgaW1wb3J0Lm1ldGEudXJsKTtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8wX19fID0gX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMF9fXyk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMV9fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzFfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIGBAbGF5ZXIgYmFzZSB7XG4gIEBmb250LWZhY2Uge1xuICAgIGZvbnQtZmFtaWx5OiBcIkpvc2VmaW4gU2Fuc1wiO1xuICAgIHNyYzogdXJsKCR7X19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMF9fX30pIGZvcm1hdChcInR0ZlwiKSxcbiAgICAgIHVybCgke19fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzFfX199KSBmb3JtYXQoXCJ0dGZcIik7XG4gICAgZm9udC13ZWlnaHQ6IDYwMDtcbiAgICBmb250LXN0eWxlOiBub3JtYWw7XG4gIH1cblxuICA6cm9vdCB7XG4gICAgLS1wcmltYXJ5OiBicm93bjtcbiAgICAtLXNlY29uZGFyeTogbGlnaHRicm93bjtcbiAgICAtLXRlcnRpYXJ5OiB5ZWxsb3c7XG5cbiAgICAtLXNtLWdhcDogMTBweDtcbiAgICAtLW0tZ2FwOiAyMHB4O1xuICAgIC0tbC1nYXA6IDMwcHg7XG5cbiAgICAtLXNtLWJyOiA1cHg7XG5cbiAgICAtLWNsaXA6IHBvbHlnb24oXG4gICAgICAxMCUgMCxcbiAgICAgIDkwJSAwLFxuICAgICAgMTAwJSAyMCUsXG4gICAgICAxMDAlIDgwJSxcbiAgICAgIDkwJSAxMDAlLFxuICAgICAgMTAlIDEwMCUsXG4gICAgICAwIDgwJSxcbiAgICAgIDAgMjAlXG4gICAgKTtcbiAgfVxuXG4gICosXG4gICo6OmJlZm9yZSxcbiAgKjo6YWZ0ZXIge1xuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gIH1cblxuICBib2R5IHtcbiAgICBmb250LWZhbWlseTogXCJKb3NlZmluIFNhbnNcIiwgc3lzdGVtLXVpLCBzYW5zLXNlcmlmO1xuICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLXByaW1hcnkpO1xuICAgIGNvbG9yOiB2YXIoLS1wcmltYXJ5LWNvbnRyYXN0KTtcbiAgICBtYXJnaW46IDA7XG4gIH1cblxuICBpbnB1dCxcbiAgdGV4dGFyZWEsXG4gIGJ1dHRvbixcbiAgc2VsZWN0IHtcbiAgICBmb250OiBpbmhlcml0O1xuICAgIGZvbnQtc2l6ZTogMTAwJTtcbiAgfVxufVxuYCwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvY3NzLWNvbXBvbmVudHMvYmFzZS5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7RUFDRTtJQUNFLDJCQUEyQjtJQUMzQjsyREFDc0U7SUFDdEUsZ0JBQWdCO0lBQ2hCLGtCQUFrQjtFQUNwQjs7RUFFQTtJQUNFLGdCQUFnQjtJQUNoQix1QkFBdUI7SUFDdkIsa0JBQWtCOztJQUVsQixjQUFjO0lBQ2QsYUFBYTtJQUNiLGFBQWE7O0lBRWIsWUFBWTs7SUFFWjs7Ozs7Ozs7O0tBU0M7RUFDSDs7RUFFQTs7O0lBR0Usc0JBQXNCO0VBQ3hCOztFQUVBO0lBQ0Usa0RBQWtEO0lBQ2xELGdDQUFnQztJQUNoQyw4QkFBOEI7SUFDOUIsU0FBUztFQUNYOztFQUVBOzs7O0lBSUUsYUFBYTtJQUNiLGVBQWU7RUFDakI7QUFDRlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCJAbGF5ZXIgYmFzZSB7XFxuICBAZm9udC1mYWNlIHtcXG4gICAgZm9udC1mYW1pbHk6IFxcXCJKb3NlZmluIFNhbnNcXFwiO1xcbiAgICBzcmM6IHVybCguLi9mb250cy9Kb3NlZmluU2Fucy1WYXJpYWJsZUZvbnRfd2dodC50dGYpIGZvcm1hdChcXFwidHRmXFxcIiksXFxuICAgICAgdXJsKC4uL2ZvbnRzL0pvc2VmaW5TYW5zLUl0YWxpYy1WYXJpYWJsZUZvbnRfd2dodC50dGYpIGZvcm1hdChcXFwidHRmXFxcIik7XFxuICAgIGZvbnQtd2VpZ2h0OiA2MDA7XFxuICAgIGZvbnQtc3R5bGU6IG5vcm1hbDtcXG4gIH1cXG5cXG4gIDpyb290IHtcXG4gICAgLS1wcmltYXJ5OiBicm93bjtcXG4gICAgLS1zZWNvbmRhcnk6IGxpZ2h0YnJvd247XFxuICAgIC0tdGVydGlhcnk6IHllbGxvdztcXG5cXG4gICAgLS1zbS1nYXA6IDEwcHg7XFxuICAgIC0tbS1nYXA6IDIwcHg7XFxuICAgIC0tbC1nYXA6IDMwcHg7XFxuXFxuICAgIC0tc20tYnI6IDVweDtcXG5cXG4gICAgLS1jbGlwOiBwb2x5Z29uKFxcbiAgICAgIDEwJSAwLFxcbiAgICAgIDkwJSAwLFxcbiAgICAgIDEwMCUgMjAlLFxcbiAgICAgIDEwMCUgODAlLFxcbiAgICAgIDkwJSAxMDAlLFxcbiAgICAgIDEwJSAxMDAlLFxcbiAgICAgIDAgODAlLFxcbiAgICAgIDAgMjAlXFxuICAgICk7XFxuICB9XFxuXFxuICAqLFxcbiAgKjo6YmVmb3JlLFxcbiAgKjo6YWZ0ZXIge1xcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbiAgfVxcblxcbiAgYm9keSB7XFxuICAgIGZvbnQtZmFtaWx5OiBcXFwiSm9zZWZpbiBTYW5zXFxcIiwgc3lzdGVtLXVpLCBzYW5zLXNlcmlmO1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1wcmltYXJ5KTtcXG4gICAgY29sb3I6IHZhcigtLXByaW1hcnktY29udHJhc3QpO1xcbiAgICBtYXJnaW46IDA7XFxuICB9XFxuXFxuICBpbnB1dCxcXG4gIHRleHRhcmVhLFxcbiAgYnV0dG9uLFxcbiAgc2VsZWN0IHtcXG4gICAgZm9udDogaW5oZXJpdDtcXG4gICAgZm9udC1zaXplOiAxMDAlO1xcbiAgfVxcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgYEBsYXllciBjb21wb25lbnQge1xuICAuZGVzYyB7XG4gICAgcGFkZGluZzogdmFyKC0tc20tZ2FwKSBjYWxjKDIgKiB2YXIoLS1sLWdhcCkpO1xuICB9XG5cbiAgLmRlc2MgZGQge1xuICAgIG1hcmdpbi1ib3R0b206IHZhcigtLXNtLWdhcCk7XG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gICAgbGV0dGVyLXNwYWNpbmc6IDEuMnB4O1xuICB9XG59XG5gLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9jc3MtY29tcG9uZW50cy9kZXNjTGlzdC5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7RUFDRTtJQUNFLDZDQUE2QztFQUMvQzs7RUFFQTtJQUNFLDRCQUE0QjtJQUM1QixpQkFBaUI7SUFDakIscUJBQXFCO0VBQ3ZCO0FBQ0ZcIixcInNvdXJjZXNDb250ZW50XCI6W1wiQGxheWVyIGNvbXBvbmVudCB7XFxuICAuZGVzYyB7XFxuICAgIHBhZGRpbmc6IHZhcigtLXNtLWdhcCkgY2FsYygyICogdmFyKC0tbC1nYXApKTtcXG4gIH1cXG5cXG4gIC5kZXNjIGRkIHtcXG4gICAgbWFyZ2luLWJvdHRvbTogdmFyKC0tc20tZ2FwKTtcXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxuICAgIGxldHRlci1zcGFjaW5nOiAxLjJweDtcXG4gIH1cXG59XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIGBAbGF5ZXIgY29tcG9uZW50IHtcbiAgI2NvbnRlbnQge1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIGdhcDogY2FsYygzICogdmFyKC0tbC1nYXApKTtcbiAgfVxuXG4gICNjb250ZW50ID4gKiB7XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICB9XG5cbiAgI2NvbnRlbnQgPiAqOjpiZWZvcmUge1xuICAgIGNvbnRlbnQ6IFwiXCI7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmVkO1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICB0b3A6IDA7XG4gICAgcmlnaHQ6IDA7XG4gICAgYm90dG9tOiAwO1xuICAgIGxlZnQ6IDA7XG4gICAgY2xpcC1wYXRoOiB2YXIoLS1jbGlwKTtcbiAgICB6LWluZGV4OiAtMTtcbiAgfVxuXG4gICNjb250ZW50ID4gKjo6YWZ0ZXIge1xuICAgIGNvbnRlbnQ6IFwiXCI7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogeWVsbG93O1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICB0b3A6IC0yMHB4O1xuICAgIHJpZ2h0OiAtMjBweDtcbiAgICBib3R0b206IC0yMHB4O1xuICAgIGxlZnQ6IC0yMHB4O1xuICAgIGNsaXAtcGF0aDogdmFyKC0tY2xpcCk7XG4gICAgei1pbmRleDogLTI7XG4gIH1cblxuICAjY29udGVudCA+ICo6bGFzdC1jaGlsZCB7XG4gICAgbWFyZ2luLWJvdHRvbTogY2FsYygyICogdmFyKC0tbC1nYXApKTtcbiAgfVxufVxuYCwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvY3NzLWNvbXBvbmVudHMvbWFpbi5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7RUFDRTtJQUNFLGFBQWE7SUFDYixzQkFBc0I7SUFDdEIsbUJBQW1CO0lBQ25CLDJCQUEyQjtFQUM3Qjs7RUFFQTtJQUNFLGtCQUFrQjtFQUNwQjs7RUFFQTtJQUNFLFdBQVc7SUFDWCxxQkFBcUI7SUFDckIsa0JBQWtCO0lBQ2xCLE1BQU07SUFDTixRQUFRO0lBQ1IsU0FBUztJQUNULE9BQU87SUFDUCxzQkFBc0I7SUFDdEIsV0FBVztFQUNiOztFQUVBO0lBQ0UsV0FBVztJQUNYLHdCQUF3QjtJQUN4QixrQkFBa0I7SUFDbEIsVUFBVTtJQUNWLFlBQVk7SUFDWixhQUFhO0lBQ2IsV0FBVztJQUNYLHNCQUFzQjtJQUN0QixXQUFXO0VBQ2I7O0VBRUE7SUFDRSxxQ0FBcUM7RUFDdkM7QUFDRlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCJAbGF5ZXIgY29tcG9uZW50IHtcXG4gICNjb250ZW50IHtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gICAgZ2FwOiBjYWxjKDMgKiB2YXIoLS1sLWdhcCkpO1xcbiAgfVxcblxcbiAgI2NvbnRlbnQgPiAqIHtcXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgfVxcblxcbiAgI2NvbnRlbnQgPiAqOjpiZWZvcmUge1xcbiAgICBjb250ZW50OiBcXFwiXFxcIjtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmVkO1xcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICAgIHRvcDogMDtcXG4gICAgcmlnaHQ6IDA7XFxuICAgIGJvdHRvbTogMDtcXG4gICAgbGVmdDogMDtcXG4gICAgY2xpcC1wYXRoOiB2YXIoLS1jbGlwKTtcXG4gICAgei1pbmRleDogLTE7XFxuICB9XFxuXFxuICAjY29udGVudCA+ICo6OmFmdGVyIHtcXG4gICAgY29udGVudDogXFxcIlxcXCI7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHllbGxvdztcXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgICB0b3A6IC0yMHB4O1xcbiAgICByaWdodDogLTIwcHg7XFxuICAgIGJvdHRvbTogLTIwcHg7XFxuICAgIGxlZnQ6IC0yMHB4O1xcbiAgICBjbGlwLXBhdGg6IHZhcigtLWNsaXApO1xcbiAgICB6LWluZGV4OiAtMjtcXG4gIH1cXG5cXG4gICNjb250ZW50ID4gKjpsYXN0LWNoaWxkIHtcXG4gICAgbWFyZ2luLWJvdHRvbTogY2FsYygyICogdmFyKC0tbC1nYXApKTtcXG4gIH1cXG59XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIGBAbGF5ZXIgY29tcG9uZW50IHtcbiAgI25hdiB1bCB7XG4gICAgbGlzdC1zdHlsZS10eXBlOiBub25lO1xuICAgIHBhZGRpbmc6IDA7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgfVxufVxuYCwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvY3NzLWNvbXBvbmVudHMvbmF2LmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtFQUNFO0lBQ0UscUJBQXFCO0lBQ3JCLFVBQVU7SUFDVixhQUFhO0lBQ2IsdUJBQXVCO0VBQ3pCO0FBQ0ZcIixcInNvdXJjZXNDb250ZW50XCI6W1wiQGxheWVyIGNvbXBvbmVudCB7XFxuICAjbmF2IHVsIHtcXG4gICAgbGlzdC1zdHlsZS10eXBlOiBub25lO1xcbiAgICBwYWRkaW5nOiAwO1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gIH1cXG59XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIGBAbGF5ZXIgY29tcG9uZW50IHtcbiAgLnByaW1hcnktaGVhZGluZyB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogeWVsbG93O1xuICAgIHdpZHRoOiBmaXQtY29udGVudDtcbiAgICBwYWRkaW5nOiB2YXIoLS1zbS1nYXApIHZhcigtLWwtZ2FwKTtcbiAgfVxufVxuYCwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvY3NzLWNvbXBvbmVudHMvcHJpbWFyeS1oZWFkaW5nLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtFQUNFO0lBQ0Usd0JBQXdCO0lBQ3hCLGtCQUFrQjtJQUNsQixtQ0FBbUM7RUFDckM7QUFDRlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCJAbGF5ZXIgY29tcG9uZW50IHtcXG4gIC5wcmltYXJ5LWhlYWRpbmcge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB5ZWxsb3c7XFxuICAgIHdpZHRoOiBmaXQtY29udGVudDtcXG4gICAgcGFkZGluZzogdmFyKC0tc20tZ2FwKSB2YXIoLS1sLWdhcCk7XFxuICB9XFxufVxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBgQGxheWVyIGNvbXBvbmVudCB7XG4gIC5yZXZpZXcge1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICBtYXgtd2lkdGg6IDYwY2g7XG4gICAgcGFkZGluZzogdmFyKC0tbC1nYXApO1xuICB9XG5cbiAgLnJldmlldyBpbWcge1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICB0b3A6IC0yNSU7XG4gICAgcmlnaHQ6IDUwJTtcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoNTAlKTtcbiAgfVxufVxuYCwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvY3NzLWNvbXBvbmVudHMvcmV2aWV3LWFydGljbGUuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0VBQ0U7SUFDRSxrQkFBa0I7SUFDbEIsZUFBZTtJQUNmLHFCQUFxQjtFQUN2Qjs7RUFFQTtJQUNFLGtCQUFrQjtJQUNsQixTQUFTO0lBQ1QsVUFBVTtJQUNWLDBCQUEwQjtFQUM1QjtBQUNGXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIkBsYXllciBjb21wb25lbnQge1xcbiAgLnJldmlldyB7XFxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gICAgbWF4LXdpZHRoOiA2MGNoO1xcbiAgICBwYWRkaW5nOiB2YXIoLS1sLWdhcCk7XFxuICB9XFxuXFxuICAucmV2aWV3IGltZyB7XFxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gICAgdG9wOiAtMjUlO1xcbiAgICByaWdodDogNTAlO1xcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoNTAlKTtcXG4gIH1cXG59XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIGBAbGF5ZXIgY29tcG9uZW50IHtcbiAgLnRyZWVob3VzZS1pbWcge1xuICAgIHdpZHRoOiAxMDBweDtcbiAgfVxufVxuYCwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvY3NzLWNvbXBvbmVudHMvdHJlZWhvdXNlLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtFQUNFO0lBQ0UsWUFBWTtFQUNkO0FBQ0ZcIixcInNvdXJjZXNDb250ZW50XCI6W1wiQGxheWVyIGNvbXBvbmVudCB7XFxuICAudHJlZWhvdXNlLWltZyB7XFxuICAgIHdpZHRoOiAxMDBweDtcXG4gIH1cXG59XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVRfUlVMRV9JTVBPUlRfMF9fXyBmcm9tIFwiLSEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2Nzcy1jb21wb25lbnRzL2Jhc2UuY3NzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BVF9SVUxFX0lNUE9SVF8xX19fIGZyb20gXCItIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vY3NzLWNvbXBvbmVudHMvdHJlZWhvdXNlLmNzc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVRfUlVMRV9JTVBPUlRfMl9fXyBmcm9tIFwiLSEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2Nzcy1jb21wb25lbnRzL25hdi5jc3NcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FUX1JVTEVfSU1QT1JUXzNfX18gZnJvbSBcIi0hLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9jc3MtY29tcG9uZW50cy9tYWluLmNzc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVRfUlVMRV9JTVBPUlRfNF9fXyBmcm9tIFwiLSEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2Nzcy1jb21wb25lbnRzL3ByaW1hcnktaGVhZGluZy5jc3NcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FUX1JVTEVfSU1QT1JUXzVfX18gZnJvbSBcIi0hLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9jc3MtY29tcG9uZW50cy9yZXZpZXctYXJ0aWNsZS5jc3NcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FUX1JVTEVfSU1QT1JUXzZfX18gZnJvbSBcIi0hLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9jc3MtY29tcG9uZW50cy9kZXNjTGlzdC5jc3NcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLmkoX19fQ1NTX0xPQURFUl9BVF9SVUxFX0lNUE9SVF8wX19fKTtcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLmkoX19fQ1NTX0xPQURFUl9BVF9SVUxFX0lNUE9SVF8xX19fKTtcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLmkoX19fQ1NTX0xPQURFUl9BVF9SVUxFX0lNUE9SVF8yX19fKTtcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLmkoX19fQ1NTX0xPQURFUl9BVF9SVUxFX0lNUE9SVF8zX19fKTtcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLmkoX19fQ1NTX0xPQURFUl9BVF9SVUxFX0lNUE9SVF80X19fKTtcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLmkoX19fQ1NTX0xPQURFUl9BVF9SVUxFX0lNUE9SVF81X19fKTtcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLmkoX19fQ1NTX0xPQURFUl9BVF9SVUxFX0lNUE9SVF82X19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBgQGxheWVyIGNvbXBvbmVudCwgcGFnZSwgYmFzZTtcbmAsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL3N0eWxlLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQSw0QkFBNEJcIixcInNvdXJjZXNDb250ZW50XCI6W1wiQGxheWVyIGNvbXBvbmVudCwgcGFnZSwgYmFzZTtcXG5cXG5AaW1wb3J0IHVybCguL2Nzcy1jb21wb25lbnRzL2Jhc2UuY3NzKTtcXG5AaW1wb3J0IHVybCguL2Nzcy1jb21wb25lbnRzL3RyZWVob3VzZS5jc3MpO1xcbkBpbXBvcnQgdXJsKC4vY3NzLWNvbXBvbmVudHMvbmF2LmNzcyk7XFxuQGltcG9ydCB1cmwoLi9jc3MtY29tcG9uZW50cy9tYWluLmNzcyk7XFxuQGltcG9ydCB1cmwoLi9jc3MtY29tcG9uZW50cy9wcmltYXJ5LWhlYWRpbmcuY3NzKTtcXG5AaW1wb3J0IHVybCguL2Nzcy1jb21wb25lbnRzL3Jldmlldy1hcnRpY2xlLmNzcyk7XFxuQGltcG9ydCB1cmwoLi9jc3MtY29tcG9uZW50cy9kZXNjTGlzdC5jc3MpO1xcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLypcbiAgTUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcbiAgQXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcpIHtcbiAgdmFyIGxpc3QgPSBbXTtcblxuICAvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG4gIGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHZhciBjb250ZW50ID0gXCJcIjtcbiAgICAgIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2YgaXRlbVs1XSAhPT0gXCJ1bmRlZmluZWRcIjtcbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKTtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIik7XG4gICAgICB9XG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKTtcbiAgICAgIH1cbiAgICAgIGNvbnRlbnQgKz0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtKTtcbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfSkuam9pbihcIlwiKTtcbiAgfTtcblxuICAvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuICBsaXN0LmkgPSBmdW5jdGlvbiBpKG1vZHVsZXMsIG1lZGlhLCBkZWR1cGUsIHN1cHBvcnRzLCBsYXllcikge1xuICAgIGlmICh0eXBlb2YgbW9kdWxlcyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgbW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgdW5kZWZpbmVkXV07XG4gICAgfVxuICAgIHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG4gICAgaWYgKGRlZHVwZSkge1xuICAgICAgZm9yICh2YXIgayA9IDA7IGsgPCB0aGlzLmxlbmd0aDsgaysrKSB7XG4gICAgICAgIHZhciBpZCA9IHRoaXNba11bMF07XG4gICAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgICAgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGZvciAodmFyIF9rID0gMDsgX2sgPCBtb2R1bGVzLmxlbmd0aDsgX2srKykge1xuICAgICAgdmFyIGl0ZW0gPSBbXS5jb25jYXQobW9kdWxlc1tfa10pO1xuICAgICAgaWYgKGRlZHVwZSAmJiBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBsYXllciAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBpZiAodHlwZW9mIGl0ZW1bNV0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChtZWRpYSkge1xuICAgICAgICBpZiAoIWl0ZW1bMl0pIHtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoc3VwcG9ydHMpIHtcbiAgICAgICAgaWYgKCFpdGVtWzRdKSB7XG4gICAgICAgICAgaXRlbVs0XSA9IFwiXCIuY29uY2F0KHN1cHBvcnRzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNF0gPSBzdXBwb3J0cztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIGxpc3Q7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh1cmwsIG9wdGlvbnMpIHtcbiAgaWYgKCFvcHRpb25zKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG4gIGlmICghdXJsKSB7XG4gICAgcmV0dXJuIHVybDtcbiAgfVxuICB1cmwgPSBTdHJpbmcodXJsLl9fZXNNb2R1bGUgPyB1cmwuZGVmYXVsdCA6IHVybCk7XG5cbiAgLy8gSWYgdXJsIGlzIGFscmVhZHkgd3JhcHBlZCBpbiBxdW90ZXMsIHJlbW92ZSB0aGVtXG4gIGlmICgvXlsnXCJdLipbJ1wiXSQvLnRlc3QodXJsKSkge1xuICAgIHVybCA9IHVybC5zbGljZSgxLCAtMSk7XG4gIH1cbiAgaWYgKG9wdGlvbnMuaGFzaCkge1xuICAgIHVybCArPSBvcHRpb25zLmhhc2g7XG4gIH1cblxuICAvLyBTaG91bGQgdXJsIGJlIHdyYXBwZWQ/XG4gIC8vIFNlZSBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3NzLXZhbHVlcy0zLyN1cmxzXG4gIGlmICgvW1wiJygpIFxcdFxcbl18KCUyMCkvLnRlc3QodXJsKSB8fCBvcHRpb25zLm5lZWRRdW90ZXMpIHtcbiAgICByZXR1cm4gXCJcXFwiXCIuY29uY2F0KHVybC5yZXBsYWNlKC9cIi9nLCAnXFxcXFwiJykucmVwbGFjZSgvXFxuL2csIFwiXFxcXG5cIiksIFwiXFxcIlwiKTtcbiAgfVxuICByZXR1cm4gdXJsO1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlbSkge1xuICB2YXIgY29udGVudCA9IGl0ZW1bMV07XG4gIHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcbiAgaWYgKCFjc3NNYXBwaW5nKSB7XG4gICAgcmV0dXJuIGNvbnRlbnQ7XG4gIH1cbiAgaWYgKHR5cGVvZiBidG9hID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICB2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoY3NzTWFwcGluZykpKSk7XG4gICAgdmFyIGRhdGEgPSBcInNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LFwiLmNvbmNhdChiYXNlNjQpO1xuICAgIHZhciBzb3VyY2VNYXBwaW5nID0gXCIvKiMgXCIuY29uY2F0KGRhdGEsIFwiICovXCIpO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbihcIlxcblwiKTtcbiAgfVxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oXCJcXG5cIik7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgc3R5bGVzSW5ET00gPSBbXTtcbmZ1bmN0aW9uIGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpIHtcbiAgdmFyIHJlc3VsdCA9IC0xO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlc0luRE9NLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHN0eWxlc0luRE9NW2ldLmlkZW50aWZpZXIgPT09IGlkZW50aWZpZXIpIHtcbiAgICAgIHJlc3VsdCA9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKSB7XG4gIHZhciBpZENvdW50TWFwID0ge307XG4gIHZhciBpZGVudGlmaWVycyA9IFtdO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaXRlbSA9IGxpc3RbaV07XG4gICAgdmFyIGlkID0gb3B0aW9ucy5iYXNlID8gaXRlbVswXSArIG9wdGlvbnMuYmFzZSA6IGl0ZW1bMF07XG4gICAgdmFyIGNvdW50ID0gaWRDb3VudE1hcFtpZF0gfHwgMDtcbiAgICB2YXIgaWRlbnRpZmllciA9IFwiXCIuY29uY2F0KGlkLCBcIiBcIikuY29uY2F0KGNvdW50KTtcbiAgICBpZENvdW50TWFwW2lkXSA9IGNvdW50ICsgMTtcbiAgICB2YXIgaW5kZXhCeUlkZW50aWZpZXIgPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICB2YXIgb2JqID0ge1xuICAgICAgY3NzOiBpdGVtWzFdLFxuICAgICAgbWVkaWE6IGl0ZW1bMl0sXG4gICAgICBzb3VyY2VNYXA6IGl0ZW1bM10sXG4gICAgICBzdXBwb3J0czogaXRlbVs0XSxcbiAgICAgIGxheWVyOiBpdGVtWzVdXG4gICAgfTtcbiAgICBpZiAoaW5kZXhCeUlkZW50aWZpZXIgIT09IC0xKSB7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0ucmVmZXJlbmNlcysrO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnVwZGF0ZXIob2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHVwZGF0ZXIgPSBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKTtcbiAgICAgIG9wdGlvbnMuYnlJbmRleCA9IGk7XG4gICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoaSwgMCwge1xuICAgICAgICBpZGVudGlmaWVyOiBpZGVudGlmaWVyLFxuICAgICAgICB1cGRhdGVyOiB1cGRhdGVyLFxuICAgICAgICByZWZlcmVuY2VzOiAxXG4gICAgICB9KTtcbiAgICB9XG4gICAgaWRlbnRpZmllcnMucHVzaChpZGVudGlmaWVyKTtcbiAgfVxuICByZXR1cm4gaWRlbnRpZmllcnM7XG59XG5mdW5jdGlvbiBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKSB7XG4gIHZhciBhcGkgPSBvcHRpb25zLmRvbUFQSShvcHRpb25zKTtcbiAgYXBpLnVwZGF0ZShvYmopO1xuICB2YXIgdXBkYXRlciA9IGZ1bmN0aW9uIHVwZGF0ZXIobmV3T2JqKSB7XG4gICAgaWYgKG5ld09iaikge1xuICAgICAgaWYgKG5ld09iai5jc3MgPT09IG9iai5jc3MgJiYgbmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiYgbmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcCAmJiBuZXdPYmouc3VwcG9ydHMgPT09IG9iai5zdXBwb3J0cyAmJiBuZXdPYmoubGF5ZXIgPT09IG9iai5sYXllcikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBhcGkudXBkYXRlKG9iaiA9IG5ld09iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZW1vdmUoKTtcbiAgICB9XG4gIH07XG4gIHJldHVybiB1cGRhdGVyO1xufVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobGlzdCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgbGlzdCA9IGxpc3QgfHwgW107XG4gIHZhciBsYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucyk7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGUobmV3TGlzdCkge1xuICAgIG5ld0xpc3QgPSBuZXdMaXN0IHx8IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tpXTtcbiAgICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhdLnJlZmVyZW5jZXMtLTtcbiAgICB9XG4gICAgdmFyIG5ld0xhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShuZXdMaXN0LCBvcHRpb25zKTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIF9pZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW19pXTtcbiAgICAgIHZhciBfaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihfaWRlbnRpZmllcik7XG4gICAgICBpZiAoc3R5bGVzSW5ET01bX2luZGV4XS5yZWZlcmVuY2VzID09PSAwKSB7XG4gICAgICAgIHN0eWxlc0luRE9NW19pbmRleF0udXBkYXRlcigpO1xuICAgICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoX2luZGV4LCAxKTtcbiAgICAgIH1cbiAgICB9XG4gICAgbGFzdElkZW50aWZpZXJzID0gbmV3TGFzdElkZW50aWZpZXJzO1xuICB9O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIG1lbW8gPSB7fTtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBnZXRUYXJnZXQodGFyZ2V0KSB7XG4gIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgdmFyIHN0eWxlVGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpO1xuXG4gICAgLy8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcbiAgICBpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG4gICAgICB0cnkge1xuICAgICAgICAvLyBUaGlzIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFjY2VzcyB0byBpZnJhbWUgaXMgYmxvY2tlZFxuICAgICAgICAvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuICAgICAgICBzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuICAgICAgICBzdHlsZVRhcmdldCA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuICAgIG1lbW9bdGFyZ2V0XSA9IHN0eWxlVGFyZ2V0O1xuICB9XG4gIHJldHVybiBtZW1vW3RhcmdldF07XG59XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gaW5zZXJ0QnlTZWxlY3RvcihpbnNlcnQsIHN0eWxlKSB7XG4gIHZhciB0YXJnZXQgPSBnZXRUYXJnZXQoaW5zZXJ0KTtcbiAgaWYgKCF0YXJnZXQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydCcgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuICB9XG4gIHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydEJ5U2VsZWN0b3I7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpIHtcbiAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XG4gIG9wdGlvbnMuc2V0QXR0cmlidXRlcyhlbGVtZW50LCBvcHRpb25zLmF0dHJpYnV0ZXMpO1xuICBvcHRpb25zLmluc2VydChlbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xuICByZXR1cm4gZWxlbWVudDtcbn1cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0U3R5bGVFbGVtZW50OyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcyhzdHlsZUVsZW1lbnQpIHtcbiAgdmFyIG5vbmNlID0gdHlwZW9mIF9fd2VicGFja19ub25jZV9fICE9PSBcInVuZGVmaW5lZFwiID8gX193ZWJwYWNrX25vbmNlX18gOiBudWxsO1xuICBpZiAobm9uY2UpIHtcbiAgICBzdHlsZUVsZW1lbnQuc2V0QXR0cmlidXRlKFwibm9uY2VcIiwgbm9uY2UpO1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlczsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaikge1xuICB2YXIgY3NzID0gXCJcIjtcbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KG9iai5zdXBwb3J0cywgXCIpIHtcIik7XG4gIH1cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIkBtZWRpYSBcIi5jb25jYXQob2JqLm1lZGlhLCBcIiB7XCIpO1xuICB9XG4gIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2Ygb2JqLmxheWVyICE9PSBcInVuZGVmaW5lZFwiO1xuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwiQGxheWVyXCIuY29uY2F0KG9iai5sYXllci5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KG9iai5sYXllcikgOiBcIlwiLCBcIiB7XCIpO1xuICB9XG4gIGNzcyArPSBvYmouY3NzO1xuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuICB2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcbiAgaWYgKHNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIuY29uY2F0KGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSksIFwiICovXCIpO1xuICB9XG5cbiAgLy8gRm9yIG9sZCBJRVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG4gIG9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG59XG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KSB7XG4gIC8vIGlzdGFuYnVsIGlnbm9yZSBpZlxuICBpZiAoc3R5bGVFbGVtZW50LnBhcmVudE5vZGUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgc3R5bGVFbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50KTtcbn1cblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBkb21BUEkob3B0aW9ucykge1xuICBpZiAodHlwZW9mIGRvY3VtZW50ID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKCkge30sXG4gICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHt9XG4gICAgfTtcbiAgfVxuICB2YXIgc3R5bGVFbGVtZW50ID0gb3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucyk7XG4gIHJldHVybiB7XG4gICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUob2JqKSB7XG4gICAgICBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaik7XG4gICAgfSxcbiAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpO1xuICAgIH1cbiAgfTtcbn1cbm1vZHVsZS5leHBvcnRzID0gZG9tQVBJOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50KSB7XG4gIGlmIChzdHlsZUVsZW1lbnQuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG4gIH0gZWxzZSB7XG4gICAgd2hpbGUgKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKSB7XG4gICAgICBzdHlsZUVsZW1lbnQucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpO1xuICAgIH1cbiAgICBzdHlsZUVsZW1lbnQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gc3R5bGVUYWdUcmFuc2Zvcm07IiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHRpZDogbW9kdWxlSWQsXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbi8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBfX3dlYnBhY2tfbW9kdWxlc19fO1xuXG4iLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gKG1vZHVsZSkgPT4ge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHQoKSA9PiAobW9kdWxlWydkZWZhdWx0J10pIDpcblx0XHQoKSA9PiAobW9kdWxlKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18uZyA9IChmdW5jdGlvbigpIHtcblx0aWYgKHR5cGVvZiBnbG9iYWxUaGlzID09PSAnb2JqZWN0JykgcmV0dXJuIGdsb2JhbFRoaXM7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIHRoaXMgfHwgbmV3IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcpIHJldHVybiB3aW5kb3c7XG5cdH1cbn0pKCk7IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsInZhciBzY3JpcHRVcmw7XG5pZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5nLmltcG9ydFNjcmlwdHMpIHNjcmlwdFVybCA9IF9fd2VicGFja19yZXF1aXJlX18uZy5sb2NhdGlvbiArIFwiXCI7XG52YXIgZG9jdW1lbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmcuZG9jdW1lbnQ7XG5pZiAoIXNjcmlwdFVybCAmJiBkb2N1bWVudCkge1xuXHRpZiAoZG9jdW1lbnQuY3VycmVudFNjcmlwdClcblx0XHRzY3JpcHRVcmwgPSBkb2N1bWVudC5jdXJyZW50U2NyaXB0LnNyYztcblx0aWYgKCFzY3JpcHRVcmwpIHtcblx0XHR2YXIgc2NyaXB0cyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwic2NyaXB0XCIpO1xuXHRcdGlmKHNjcmlwdHMubGVuZ3RoKSB7XG5cdFx0XHR2YXIgaSA9IHNjcmlwdHMubGVuZ3RoIC0gMTtcblx0XHRcdHdoaWxlIChpID4gLTEgJiYgIXNjcmlwdFVybCkgc2NyaXB0VXJsID0gc2NyaXB0c1tpLS1dLnNyYztcblx0XHR9XG5cdH1cbn1cbi8vIFdoZW4gc3VwcG9ydGluZyBicm93c2VycyB3aGVyZSBhbiBhdXRvbWF0aWMgcHVibGljUGF0aCBpcyBub3Qgc3VwcG9ydGVkIHlvdSBtdXN0IHNwZWNpZnkgYW4gb3V0cHV0LnB1YmxpY1BhdGggbWFudWFsbHkgdmlhIGNvbmZpZ3VyYXRpb25cbi8vIG9yIHBhc3MgYW4gZW1wdHkgc3RyaW5nIChcIlwiKSBhbmQgc2V0IHRoZSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyB2YXJpYWJsZSBmcm9tIHlvdXIgY29kZSB0byB1c2UgeW91ciBvd24gbG9naWMuXG5pZiAoIXNjcmlwdFVybCkgdGhyb3cgbmV3IEVycm9yKFwiQXV0b21hdGljIHB1YmxpY1BhdGggaXMgbm90IHN1cHBvcnRlZCBpbiB0aGlzIGJyb3dzZXJcIik7XG5zY3JpcHRVcmwgPSBzY3JpcHRVcmwucmVwbGFjZSgvIy4qJC8sIFwiXCIpLnJlcGxhY2UoL1xcPy4qJC8sIFwiXCIpLnJlcGxhY2UoL1xcL1teXFwvXSskLywgXCIvXCIpO1xuX193ZWJwYWNrX3JlcXVpcmVfXy5wID0gc2NyaXB0VXJsOyIsIl9fd2VicGFja19yZXF1aXJlX18uYiA9IGRvY3VtZW50LmJhc2VVUkkgfHwgc2VsZi5sb2NhdGlvbi5ocmVmO1xuXG4vLyBvYmplY3QgdG8gc3RvcmUgbG9hZGVkIGFuZCBsb2FkaW5nIGNodW5rc1xuLy8gdW5kZWZpbmVkID0gY2h1bmsgbm90IGxvYWRlZCwgbnVsbCA9IGNodW5rIHByZWxvYWRlZC9wcmVmZXRjaGVkXG4vLyBbcmVzb2x2ZSwgcmVqZWN0LCBQcm9taXNlXSA9IGNodW5rIGxvYWRpbmcsIDAgPSBjaHVuayBsb2FkZWRcbnZhciBpbnN0YWxsZWRDaHVua3MgPSB7XG5cdDE3OTogMFxufTtcblxuLy8gbm8gY2h1bmsgb24gZGVtYW5kIGxvYWRpbmdcblxuLy8gbm8gcHJlZmV0Y2hpbmdcblxuLy8gbm8gcHJlbG9hZGVkXG5cbi8vIG5vIEhNUlxuXG4vLyBubyBITVIgbWFuaWZlc3RcblxuLy8gbm8gb24gY2h1bmtzIGxvYWRlZFxuXG4vLyBubyBqc29ucCBmdW5jdGlvbiIsIl9fd2VicGFja19yZXF1aXJlX18ubmMgPSB1bmRlZmluZWQ7IiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiY29uc3QgRWxlbWVudEZhY3RvcnkgPSAoZnVuY3Rpb24gKCkge1xuICBjb25zdCBjcmVhdGVDb250YWluZXJFbGUgPSAodHlwZSA9IFwiZGl2XCIsIGNsYXNzbmFtZSA9IFwiXCIpID0+IHtcbiAgICBjb25zdCBlbGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHR5cGUpO1xuICAgIGlmIChjbGFzc25hbWUpIGVsZS5jbGFzc0xpc3QuYWRkKGNsYXNzbmFtZSk7XG4gICAgcmV0dXJuIGVsZTtcbiAgfTtcblxuICBjb25zdCBjcmVhdGVUZXh0RWxlID0gKHRleHQsIHR5cGUgPSBcInBcIiwgY2xhc3NuYW1lID0gXCJcIikgPT4ge1xuICAgIGNvbnN0IGVsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodHlwZSk7XG4gICAgaWYgKGNsYXNzbmFtZSkgZWxlLmNsYXNzTGlzdC5hZGQoY2xhc3NuYW1lKTtcbiAgICBlbGUudGV4dENvbnRlbnQgPSB0ZXh0O1xuICAgIHJldHVybiBlbGU7XG4gIH07XG5cbiAgY29uc3QgY3JlYXRlSW1nID0gKGltYWdlU291cmNlLCBjbGFzc25hbWUgPSBcIlwiKSA9PiB7XG4gICAgY29uc3QgaW1nID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImltZ1wiKTtcbiAgICBpbWcuc3JjID0gaW1hZ2VTb3VyY2U7XG4gICAgaWYgKGNsYXNzbmFtZSkgaW1nLmNsYXNzTGlzdC5hZGQoY2xhc3NuYW1lKTtcbiAgICByZXR1cm4gaW1nO1xuICB9O1xuXG4gIGNvbnN0IGNyZWF0ZUFuY2hvciA9IChjYXBUeXBlLCB0eXBlLCBsaW5rKSA9PiB7XG4gICAgY29uc3Qgc3BhbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpO1xuICAgIHNwYW4udGV4dENvbnRlbnQgPSBgJHtjYXBUeXBlfTogYDtcbiAgICBjb25zdCBhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImFcIik7XG4gICAgYS50ZXh0Q29udGVudCA9IGxpbms7XG4gICAgdHlwZSA9PT0gXCJ0ZWxcIlxuICAgICAgPyAoYS5ocmVmID0gXCJ0ZWw6XCIgKyBsaW5rKVxuICAgICAgOiB0eXBlID09PSBcImVtYWlsXCJcbiAgICAgID8gKGEuaHJlZiA9IFwibWFpbHRvOlwiICsgbGluaylcbiAgICAgIDogbnVsbDtcblxuICAgIHNwYW4uYXBwZW5kQ2hpbGQoYSk7XG4gICAgcmV0dXJuIHNwYW47XG4gIH07XG5cbiAgcmV0dXJuIHtcbiAgICBjcmVhdGVDb250YWluZXJFbGUsXG4gICAgY3JlYXRlVGV4dEVsZSxcbiAgICBjcmVhdGVJbWcsXG4gICAgY3JlYXRlQW5jaG9yLFxuICB9O1xufSkoKTtcblxuZXhwb3J0IGRlZmF1bHQgRWxlbWVudEZhY3Rvcnk7XG4iLCJjb25zdCBTdHJpbmdIZWxwZXIgPSAoZnVuY3Rpb24gKCkge1xuICBjb25zdCBjYXBpdGFsaXplID0gKHdvcmQpID0+IHtcbiAgICByZXR1cm4gd29yZFswXS50b1VwcGVyQ2FzZSgpICsgd29yZC5zdWJzdHJpbmcoMSkudG9Mb3dlckNhc2UoKTtcbiAgfTtcblxuICByZXR1cm4ge1xuICAgIGNhcGl0YWxpemUsXG4gIH07XG59KSgpO1xuXG5leHBvcnQgZGVmYXVsdCBTdHJpbmdIZWxwZXI7XG4iLCJpbXBvcnQgRWxlbWVudEZhY3RvcnkgZnJvbSBcIi4vRWxlbWVudEZhY3RvcnkuanNcIjtcbmltcG9ydCBTdHJpbmdIZWxwZXIgZnJvbSBcIi4vU3RyaW5nSGVscGVyLmpzXCI7XG5cbmZ1bmN0aW9uIGNyZWF0ZUFkZHJlc3MoYWRkcmVzc09iaikge1xuICBjb25zdCBhZGRyZXNzID0gRWxlbWVudEZhY3RvcnkuY3JlYXRlQ29udGFpbmVyRWxlKFwiYWRkcmVzc1wiKTtcblxuICBmb3IgKGNvbnN0IGtleSBpbiBhZGRyZXNzT2JqKSB7XG4gICAgLyogcmVwZWF0aW5nIG91cnNlbHZlcyBoZXJlICovXG4gICAgY29uc3QgY2FwS2V5ID0gU3RyaW5nSGVscGVyLmNhcGl0YWxpemUoa2V5KTtcbiAgICBzd2l0Y2ggKGtleSkge1xuICAgICAgY2FzZSBcInRpdGxlXCI6XG4gICAgICAgIGNvbnN0IGgyID0gRWxlbWVudEZhY3RvcnkuY3JlYXRlVGV4dEVsZShhZGRyZXNzT2JqW2tleV0sIFwiaDJcIik7XG4gICAgICAgIGFkZHJlc3MuYXBwZW5kQ2hpbGQoaDIpO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBcImNpdHlcIjpcbiAgICAgIGNhc2UgXCJzdGF0ZVwiOlxuICAgICAgY2FzZSBcInppcFwiOlxuICAgICAgY2FzZSBcInJvbGVcIjpcbiAgICAgICAgY29uc3QgcCA9IEVsZW1lbnRGYWN0b3J5LmNyZWF0ZVRleHRFbGUoXG4gICAgICAgICAgYCR7Y2FwS2V5fTogJHthZGRyZXNzT2JqW2tleV19YCxcbiAgICAgICAgICBcInBcIlxuICAgICAgICApO1xuICAgICAgICBhZGRyZXNzLmFwcGVuZENoaWxkKHApO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBcInRlbFwiOlxuICAgICAgY2FzZSBcImVtYWlsXCI6XG4gICAgICAgIGNvbnN0IGEgPSBFbGVtZW50RmFjdG9yeS5jcmVhdGVBbmNob3IoY2FwS2V5LCBrZXksIGFkZHJlc3NPYmpba2V5XSk7XG4gICAgICAgIGFkZHJlc3MuYXBwZW5kQ2hpbGQoYSk7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBhZGRyZXNzO1xufVxuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVBZGRyZXNzO1xuIiwiaW1wb3J0IFwiLi4vc3R5bGUuY3NzXCI7IC8qIG5lZWRlZD8gKi9cbmltcG9ydCB0cmVlaG91c2VJbWcgZnJvbSBcIi4uL2ltYWdlcy90cmVlaG91c2UucG5nXCI7XG5pbXBvcnQgRWxlbWVudEZhY3RvcnkgZnJvbSBcIi4vRWxlbWVudEZhY3RvcnkuanNcIjtcbmltcG9ydCBjcmVhdGVSZXZpZXdBcnRpY2xlIGZyb20gXCIuL2NyZWF0ZVJldmlld0FydGljbGUuanNcIjtcbmltcG9ydCBjcmVhdGVEZXNjTGlzdCBmcm9tIFwiLi9jcmVhdGVEZXNjTGlzdC5qc1wiO1xuaW1wb3J0IGNyZWF0ZUFkZHJlc3MgZnJvbSBcIi4vY3JlYXRlQWRkcmVzcy5qc1wiO1xuXG5mdW5jdGlvbiByZW5kZXJIb21lKGVsZW1lbnQpIHtcbiAgY29uc3QgaGVhZGluZyA9IEVsZW1lbnRGYWN0b3J5LmNyZWF0ZVRleHRFbGUoXG4gICAgXCJBbmR5J3MgQWNvcm50YXN0aWMgQXBwZXRpemVyc1wiLFxuICAgIFwiaDFcIixcbiAgICBcInByaW1hcnktaGVhZGluZ1wiXG4gICk7XG4gIGVsZW1lbnQuYXBwZW5kQ2hpbGQoaGVhZGluZyk7XG5cbiAgY29uc3QgcmV2aWV3QXJ0aWNsZSA9IGNyZWF0ZVJldmlld0FydGljbGUoXG4gICAgXCJBZGFtXCIsXG4gICAgYEFuZHkncyB3aXRoIHRoZWlyIG93biBob21lYnJld2VkIHN5cnVwIGhhcyB0aGUgYmVzdCBwYW5jYWtlcyBhcm91bmQhIFxuICBUaGUgYXRtb3NwaGVyZSBhbmQgY3VzdG9tZXIgc2VydmljZSBtYWtlIHlvdSBmZWVsIGxpa2UgeW91IGFyZSBzaXR0aW5nXG4gIGluIHRoZSBtaWRkbGUgb2YgdGhlIHdvb2RzLCBnb3JnaW5nIG9uIG51dHMgbGlrZSBhIHNxdWlycmVsISBcbiAgVGhpcyBpcyBleGFjdGx5IHRoZSBraW5kIG9mIHBsYWNlIHRoYXQgSSBsaWtlIHRvIHJldHVybiB0byBhZ2FpbiBhbmQgYWdhaW4uYCxcbiAgICB0cmVlaG91c2VJbWdcbiAgKTtcbiAgZWxlbWVudC5hcHBlbmRDaGlsZChyZXZpZXdBcnRpY2xlKTtcblxuICBjb25zdCBvcGVuaW5nSG91cnMgPSB7XG4gICAgbW9uZGF5OiBcIjhhbSAtIDhwbVwiLFxuICAgIHR1ZXNkYXk6IFwiNmFtIC0gNnBtXCIsXG4gICAgd2VkbmVzZGF5OiBcIjZhbSAtIDZwbVwiLFxuICAgIHRodXJzZGF5OiBcIjZhbSAtIDEwcG1cIixcbiAgICBmcmlkYXk6IFwiOWFtIC0gMTFwbVwiLFxuICAgIHNhdHVyZGF5OiBcIjEwYW0gLSAxMXBtXCIsXG4gICAgc3VuZGF5OiBcIjEwYW0gLSAxMXBtXCIsXG4gIH07XG4gIGNvbnN0IGRlc2NMaXN0ID0gY3JlYXRlRGVzY0xpc3QoXCJPcGVuaW5nIEhvdXJzXCIsIG9wZW5pbmdIb3Vycyk7XG4gIGVsZW1lbnQuYXBwZW5kQ2hpbGQoZGVzY0xpc3QpO1xuXG4gIGNvbnN0IGZvb3RlciA9IEVsZW1lbnRGYWN0b3J5LmNyZWF0ZUNvbnRhaW5lckVsZShcImZvb3RlclwiKTtcbiAgY29uc3QgYWRkcmVzc09iaiA9IHtcbiAgICB0aXRsZTogXCJMb2NhdGlvblwiLFxuICAgIGNpdHk6IFwiQW55dG93blwiLFxuICAgIHN0YXRlOiBcIlRvcm9udG9cIixcbiAgICB6aXA6IDEyMzQ1LFxuICAgIHRlbDogOTg3NjU0MzIsXG4gICAgZW1haWw6IFwiam9obi5kb2VAZXhhbXBsZS5jb21cIixcbiAgfTtcbiAgY29uc3QgYWRkcmVzcyA9IGNyZWF0ZUFkZHJlc3MoYWRkcmVzc09iaik7XG4gIGZvb3Rlci5hcHBlbmRDaGlsZChhZGRyZXNzKTtcbiAgZWxlbWVudC5hcHBlbmRDaGlsZChmb290ZXIpO1xufVxuXG5leHBvcnQgZGVmYXVsdCByZW5kZXJIb21lO1xuIiwiaW1wb3J0IEVsZW1lbnRGYWN0b3J5IGZyb20gXCIuL0VsZW1lbnRGYWN0b3J5LmpzXCI7XG5cbmZ1bmN0aW9uIGNyZWF0ZVJldmlld0FydGljbGUocmV2aWV3ZXIsIHRleHQsIGltYWdlID0gbnVsbCkge1xuICBjb25zdCByZXZpZXdBcnRpY2xlID0gRWxlbWVudEZhY3RvcnkuY3JlYXRlQ29udGFpbmVyRWxlKFwiYXJ0aWNsZVwiLCBcInJldmlld1wiKTtcblxuICBpZiAoaW1hZ2UgIT09IG51bGwpIHtcbiAgICBjb25zdCBpbWcgPSBFbGVtZW50RmFjdG9yeS5jcmVhdGVJbWcoaW1hZ2UsIFwidHJlZWhvdXNlLWltZ1wiKTtcbiAgICByZXZpZXdBcnRpY2xlLmFwcGVuZENoaWxkKGltZyk7XG4gIH1cblxuICBjb25zdCBwID0gRWxlbWVudEZhY3RvcnkuY3JlYXRlVGV4dEVsZSh0ZXh0KTtcbiAgcmV2aWV3QXJ0aWNsZS5hcHBlbmRDaGlsZChwKTtcblxuICBjb25zdCBmb290ZXIgPSBFbGVtZW50RmFjdG9yeS5jcmVhdGVDb250YWluZXJFbGUoXCJmb290ZXJcIik7XG4gIGNvbnN0IGNpdGUgPSBFbGVtZW50RmFjdG9yeS5jcmVhdGVUZXh0RWxlKHJldmlld2VyLCBcImNpdGVcIik7XG4gIGZvb3Rlci5hcHBlbmRDaGlsZChjaXRlKTtcbiAgcmV2aWV3QXJ0aWNsZS5hcHBlbmRDaGlsZChmb290ZXIpO1xuXG4gIHJldHVybiByZXZpZXdBcnRpY2xlO1xufVxuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVSZXZpZXdBcnRpY2xlO1xuIiwiaW1wb3J0IEVsZW1lbnRGYWN0b3J5IGZyb20gXCIuL0VsZW1lbnRGYWN0b3J5LmpzXCI7XG5pbXBvcnQgU3RyaW5nSGVscGVyIGZyb20gXCIuL1N0cmluZ0hlbHBlci5qc1wiO1xuXG5mdW5jdGlvbiBjcmVhdGVEZXNjTGlzdCh0aXRsZSwgZGVzY09iaikge1xuICBjb25zdCBkaXYgPSBFbGVtZW50RmFjdG9yeS5jcmVhdGVDb250YWluZXJFbGUoXCJkaXZcIiwgXCJkZXNjXCIpO1xuICBjb25zdCBoMiA9IEVsZW1lbnRGYWN0b3J5LmNyZWF0ZVRleHRFbGUodGl0bGUsIFwiaDJcIik7XG4gIGNvbnN0IGRsID0gRWxlbWVudEZhY3RvcnkuY3JlYXRlQ29udGFpbmVyRWxlKFwiZGxcIik7XG5cbiAgZm9yIChjb25zdCBrZXkgaW4gZGVzY09iaikge1xuICAgIGNvbnN0IGR0ID0gRWxlbWVudEZhY3RvcnkuY3JlYXRlVGV4dEVsZShTdHJpbmdIZWxwZXIuY2FwaXRhbGl6ZShrZXkpLCBcImR0XCIpO1xuICAgIGNvbnN0IGRkID0gRWxlbWVudEZhY3RvcnkuY3JlYXRlVGV4dEVsZShkZXNjT2JqW2tleV0sIFwiZGRcIik7XG4gICAgZGwuYXBwZW5kKGR0LCBkZCk7XG4gIH1cblxuICBkaXYuYXBwZW5kKGgyLCBkbCk7XG5cbiAgcmV0dXJuIGRpdjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlRGVzY0xpc3Q7XG4iLCJpbXBvcnQgXCIuLi9zdHlsZS5jc3NcIjsgLyogbmVlZGVkPyAqL1xuaW1wb3J0IHRyZWVob3VzZUltZyBmcm9tIFwiLi4vaW1hZ2VzL3RyZWVob3VzZS5wbmdcIjtcbmltcG9ydCBFbGVtZW50RmFjdG9yeSBmcm9tIFwiLi9FbGVtZW50RmFjdG9yeS5qc1wiO1xuaW1wb3J0IGNyZWF0ZU1lbnUgZnJvbSBcIi4vY3JlYXRlTWVudS5qc1wiO1xuXG5mdW5jdGlvbiByZW5kZXJNZW51KGVsZW1lbnQpIHtcbiAgY29uc3QgaGVhZGluZyA9IEVsZW1lbnRGYWN0b3J5LmNyZWF0ZVRleHRFbGUoXCJNZW51XCIsIFwiaDFcIiwgXCJwcmltYXJ5LWhlYWRpbmdcIik7XG4gIGVsZW1lbnQuYXBwZW5kQ2hpbGQoaGVhZGluZyk7XG5cbiAgY29uc3QgbWVudU9iaiA9IHtcbiAgICBiZXZlcmFnZXM6IFtcbiAgICAgIHtcbiAgICAgICAgdGl0bGU6IFwiSG9uZXlBY29ybiBUZWFcIixcbiAgICAgICAgZGVzYzogXCJBIGNvenkgYW5kIHN3ZWV0IHRlYSBjcmFmdGVkIHdpdGggcHJlbWl1bSBzeXJ1cCwgaG9uZXksIGFuZCBhIGhpbnQgb2YgbGVtb24gdG8ga2lja3N0YXJ0IHlvdXIgZGF5IG9uIGEgZGVsaWdodGZ1bCBub3RlIVwiLFxuICAgICAgICBwcmljZTogXCIkMS4yNVwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgdGl0bGU6IFwiQmVycnkgVGVhXCIsXG4gICAgICAgIGRlc2M6IFwiQSBzb290aGluZyB0ZWEsIHJpY2ggYW5kIHNhdGlzZnlpbmcsIGluZnVzZWQgd2l0aCBhIGJsZW5kIG9mIHZhcmlvdXMgYmVycnkgZmxhdm9ycy4gSWRlYWwgd2hlbiBzZXJ2ZWQgY2hpbGxlZCwgdGhvdWdoIGEgd2FybSBzZXJ2aW5nIGlzIGF2YWlsYWJsZSB1cG9uIHJlcXVlc3QuXCIsXG4gICAgICAgIHByaWNlOiBcIiQyXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc2lkZXM6IFtcbiAgICAgIHtcbiAgICAgICAgdGl0bGU6IFwiSmFtICYgVG9hc3RcIixcbiAgICAgICAgZGVzYzogXCJBIHNsaWNlIG9mIHRvYXN0IHdpdGggeW91ciBwcmVmZXJyZWQgY2hvaWNlIG9mIGJyZWFkLCBhY2NvbXBhbmllZCBieSBvdXIgaG9tZW1hZGUgYmxhY2tiZXJyeSBvciByYXNwYmVycnkgamFtLlwiLFxuICAgICAgICBwcmljZTogXCIkMVwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgdGl0bGU6IFwiRnJlc2ggRnJ1aXRcIixcbiAgICAgICAgZGVzYzogXCJBIHNtYWxsIGJvd2wgb2YgZnJlc2ggZnJ1aXQsIHdoYXRldmVyIHdlIGZpbmQgYXQgdGhlIG1hcmtldCBmb3IgdGhlIGRheS5cIixcbiAgICAgICAgcHJpY2U6IFwiJDNcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBtYWluczogW1xuICAgICAge1xuICAgICAgICB0aXRsZTogXCJBY29ybiBTcXVhc2ggU3R1ZmZlZCB3aXRoIFdpbGQgUmljZSBhbmQgTnV0c1wiLFxuICAgICAgICBkZXNjOiBcIlJvYXN0ZWQgYWNvcm4gc3F1YXNoIGhhbHZlcyBmaWxsZWQgd2l0aCBhIHNhdm9yeSBtaXh0dXJlIG9mIHdpbGQgcmljZSwgY2hvcHBlZCBudXRzLCBkcmllZCBmcnVpdHMsIGFuZCBoZXJicy5cIixcbiAgICAgICAgcHJpY2U6IFwiJDVcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHRpdGxlOiBcIkFjb3JuLUNydXN0ZWQgQ2hpY2tlbiBUZW5kZXJzXCIsXG4gICAgICAgIGRlc2M6IFwiQ2hpY2tlbiB0ZW5kZXJzIGNvYXRlZCBpbiBhIGJhdHRlciBtYWRlIGZyb20gYWNvcm4gZmxvdXIsIHNlYXNvbmVkIHdpdGggaGVyYnMsIGFuZCBiYWtlZCBvciBmcmllZCB1bnRpbCBjcmlzcHkuXCIsXG4gICAgICAgIHByaWNlOiBcIiQxMFwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgdGl0bGU6IFwiSGF6ZWxudXQtQ3J1c3RlZCBUcm91dFwiLFxuICAgICAgICBkZXNjOiBcIlRyb3V0IGZpbGxldHMgY29hdGVkIGluIGNydXNoZWQgaGF6ZWxudXRzIGFuZCBoZXJicywgcGFuLXNlYXJlZCB0byBwZXJmZWN0aW9uLCBhbmQgc2VydmVkIHdpdGggYW4gYWNvcm4tYmFzZWQgc2F1Y2UuXCIsXG4gICAgICAgIHByaWNlOiBcIiQyMFwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgdGl0bGU6IFwiQWNvcm4gR25vY2NoaSB3aXRoIEJyb3duIEJ1dHRlciBTYWdlIFNhdWNlXCIsXG4gICAgICAgIGRlc2M6IFwiSG9tZW1hZGUgYWNvcm4gZmxvdXIgZ25vY2NoaSBzZXJ2ZWQgaW4gYSBudXR0eSBicm93biBidXR0ZXIgYW5kIHNhZ2Ugc2F1Y2UsIHNwcmlua2xlZCB3aXRoIGdyYXRlZCBQYXJtZXNhbiBjaGVlc2UuXCIsXG4gICAgICAgIHByaWNlOiBcIiQxNVwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgdGl0bGU6IFwiV2FsbnV0LUNydXN0ZWQgU2FsbW9uXCIsXG4gICAgICAgIGRlc2M6IFwiQ29tYmluZXMgdGhlIHJpY2huZXNzIG9mIHNhbG1vbiB3aXRoIHRoZSBudXR0eSBjcnVuY2ggb2Ygd2FsbnV0cyBhbmQgdGhlIHRhbmd5LXN3ZWV0IGZsYXZvcnMgb2YgbXVzdGFyZCBhbmQgaG9uZXkuXCIsXG4gICAgICAgIHByaWNlOiBcIiQ1MFwiLFxuICAgICAgfSxcbiAgICBdLFxuICB9O1xuICBjb25zdCBtZW51ID0gY3JlYXRlTWVudShtZW51T2JqKTtcbiAgbWVudS5mb3JFYWNoKChpdGVtKSA9PiB7XG4gICAgZWxlbWVudC5hcHBlbmRDaGlsZChpdGVtKTtcbiAgfSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHJlbmRlck1lbnU7XG4iLCJpbXBvcnQgRWxlbWVudEZhY3RvcnkgZnJvbSBcIi4vRWxlbWVudEZhY3RvcnkuanNcIjtcbmltcG9ydCBTdHJpbmdIZWxwZXIgZnJvbSBcIi4vU3RyaW5nSGVscGVyLmpzXCI7XG5cbmZ1bmN0aW9uIGNyZWF0ZU1lbnUobWVudU9iaikge1xuICBjb25zdCBzZWN0aW9ucyA9IFtdO1xuICBmb3IgKGNvbnN0IGNhdGVnb3J5IGluIG1lbnVPYmopIHtcbiAgICBjb25zdCBzZWN0aW9uID0gRWxlbWVudEZhY3RvcnkuY3JlYXRlQ29udGFpbmVyRWxlKFwic2VjdGlvblwiLCBjYXRlZ29yeSk7XG4gICAgY29uc3QgY2F0ZWdvcnlIZWFkZXIgPSBFbGVtZW50RmFjdG9yeS5jcmVhdGVUZXh0RWxlKFxuICAgICAgU3RyaW5nSGVscGVyLmNhcGl0YWxpemUoY2F0ZWdvcnkpLFxuICAgICAgXCJoMlwiXG4gICAgKTtcbiAgICBzZWN0aW9uLmFwcGVuZENoaWxkKGNhdGVnb3J5SGVhZGVyKTtcbiAgICBtZW51T2JqW2NhdGVnb3J5XS5mb3JFYWNoKChpdGVtKSA9PiB7XG4gICAgICBjb25zdCBhcnRpY2xlID0gRWxlbWVudEZhY3RvcnkuY3JlYXRlQ29udGFpbmVyRWxlKFwiYXJ0aWNsZVwiKTtcbiAgICAgIGNvbnN0IGl0ZW1IZWFkaW5nID0gRWxlbWVudEZhY3RvcnkuY3JlYXRlVGV4dEVsZShpdGVtLnRpdGxlLCBcImgzXCIpO1xuICAgICAgY29uc3QgaXRlbURlc2MgPSBFbGVtZW50RmFjdG9yeS5jcmVhdGVUZXh0RWxlKGl0ZW0uZGVzYyk7XG4gICAgICBjb25zdCBpdGVtUHJpY2UgPSBFbGVtZW50RmFjdG9yeS5jcmVhdGVUZXh0RWxlKGl0ZW0ucHJpY2UpO1xuICAgICAgYXJ0aWNsZS5hcHBlbmQoaXRlbUhlYWRpbmcsIGl0ZW1EZXNjLCBpdGVtUHJpY2UpO1xuICAgICAgc2VjdGlvbi5hcHBlbmRDaGlsZChhcnRpY2xlKTtcbiAgICB9KTtcbiAgICBzZWN0aW9ucy5wdXNoKHNlY3Rpb24pO1xuICB9XG4gIHJldHVybiBzZWN0aW9ucztcbn1cblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlTWVudTtcbiIsImltcG9ydCByZW5kZXJIb21lIGZyb20gXCIuL2pzLWNvbXBvbmVudHMvcmVuZGVySG9tZS5qc1wiO1xuaW1wb3J0IHJlbmRlck1lbnUgZnJvbSBcIi4vanMtY29tcG9uZW50cy9yZW5kZXJNZW51LmpzXCI7XG5pbXBvcnQgcmVuZGVyQ29udGFjdCBmcm9tIFwiLi9qcy1jb21wb25lbnRzL3JlbmRlckNvbnRhY3QuanNcIjtcblxuY29uc3QgbWFpbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjY29udGVudFwiKTtcbmNvbnN0IG5hdiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjbmF2XCIpO1xuY29uc3QgbmF2QnV0dG9ucyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIjbmF2IGJ1dHRvblwiKTtcblxubmF2LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZXZlbnQpID0+IHtcbiAgaWYgKGV2ZW50LnRhcmdldC50YWdOYW1lID09PSBcIkJVVFRPTlwiKSB7XG4gICAgY29uc3QgY2xpY2tlZEJ0biA9IGV2ZW50LnRhcmdldDtcbiAgICBjb25zdCBidXR0b25JZCA9IGNsaWNrZWRCdG4uaWQ7XG4gICAgbmF2QnV0dG9ucy5mb3JFYWNoKChidG4pID0+IHtcbiAgICAgIGJ0bi5jbGFzc0xpc3QucmVtb3ZlKFwiYWN0aXZlXCIpO1xuICAgIH0pO1xuICAgIGNsaWNrZWRCdG4uY2xhc3NMaXN0LmFkZChcImFjdGl2ZVwiKTtcbiAgICBtYWluLmlubmVySFRNTCA9IFwiXCI7XG4gICAgaWYgKGJ1dHRvbklkID09PSBcImhvbWVcIikgcmVuZGVySG9tZShtYWluKTtcbiAgICBpZiAoYnV0dG9uSWQgPT09IFwibWVudVwiKSByZW5kZXJNZW51KG1haW4pO1xuICAgIGlmIChidXR0b25JZCA9PT0gXCJjb250YWN0XCIpIHJlbmRlckNvbnRhY3QobWFpbik7XG4gIH1cbn0pO1xuXG5yZW5kZXJIb21lKG1haW4pO1xuIiwiaW1wb3J0IHRyZWVob3VzZUltZyBmcm9tIFwiLi4vaW1hZ2VzL3RyZWVob3VzZS5wbmdcIjtcbmltcG9ydCBFbGVtZW50RmFjdG9yeSBmcm9tIFwiLi9FbGVtZW50RmFjdG9yeS5qc1wiO1xuaW1wb3J0IGNyZWF0ZUFkZHJlc3MgZnJvbSBcIi4vY3JlYXRlQWRkcmVzc1wiO1xuXG5mdW5jdGlvbiByZW5kZXJDb250YWN0KGVsZW1lbnQpIHtcbiAgY29uc3QgaGVhZGluZyA9IEVsZW1lbnRGYWN0b3J5LmNyZWF0ZVRleHRFbGUoXG4gICAgXCJDb250YWN0XCIsXG4gICAgXCJoMVwiLFxuICAgIFwicHJpbWFyeS1oZWFkaW5nXCJcbiAgKTtcbiAgZWxlbWVudC5hcHBlbmRDaGlsZChoZWFkaW5nKTtcblxuICBjb25zdCBzZWN0aW9uID0gRWxlbWVudEZhY3RvcnkuY3JlYXRlQ29udGFpbmVyRWxlKFwic2VjdGlvblwiKTtcbiAgY29uc3QgZW1wbG95ZWVzID0gW1xuICAgIHtcbiAgICAgIHRpdGxlOiBcIk1hbWEgU3F1aXJyZWxcIixcbiAgICAgIHJvbGU6IFwiTWFuYWdlclwiLFxuICAgICAgdGVsOiA1NTU1NTU1NTU0LFxuICAgICAgZW1haWw6IFwidG90YWxseVJlYWxFbWFpbEBub3RGYWtlLmNvbVwiLFxuICAgIH0sXG4gICAge1xuICAgICAgdGl0bGU6IFwiUGFwYSBTcXVpcnJlbFwiLFxuICAgICAgcm9sZTogXCJDaGVmXCIsXG4gICAgICB0ZWw6IDU1NTU1NTU1NTUsXG4gICAgICBlbWFpbDogXCJwZXJmZWN0bHlSZWFsRW1haWxAbm90RmFrZS5jb21cIixcbiAgICB9LFxuICBdO1xuICBlbXBsb3llZXMuZm9yRWFjaCgoZW1wbG95ZWUpID0+IHtcbiAgICBjb25zdCBhZGRyZXNzID0gY3JlYXRlQWRkcmVzcyhlbXBsb3llZSk7XG4gICAgc2VjdGlvbi5hcHBlbmRDaGlsZChhZGRyZXNzKTtcbiAgfSk7XG4gIGVsZW1lbnQuYXBwZW5kQ2hpbGQoc2VjdGlvbik7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHJlbmRlckNvbnRhY3Q7XG4iXSwibmFtZXMiOlsiX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzBfX18iLCJVUkwiLCJfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMV9fXyIsIl9fX0NTU19MT0FERVJfRVhQT1JUX19fIiwiX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMF9fXyIsIl9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzFfX18iLCJwdXNoIiwibW9kdWxlIiwiaWQiLCJpIiwiZXhwb3J0cyIsImNzc1dpdGhNYXBwaW5nVG9TdHJpbmciLCJsaXN0IiwidG9TdHJpbmciLCJ0aGlzIiwibWFwIiwiaXRlbSIsImNvbnRlbnQiLCJuZWVkTGF5ZXIiLCJjb25jYXQiLCJsZW5ndGgiLCJqb2luIiwibW9kdWxlcyIsIm1lZGlhIiwiZGVkdXBlIiwic3VwcG9ydHMiLCJsYXllciIsInVuZGVmaW5lZCIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJrIiwiX2siLCJ1cmwiLCJvcHRpb25zIiwiU3RyaW5nIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJ0ZXN0Iiwic2xpY2UiLCJoYXNoIiwibmVlZFF1b3RlcyIsInJlcGxhY2UiLCJjc3NNYXBwaW5nIiwiYnRvYSIsImJhc2U2NCIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiSlNPTiIsInN0cmluZ2lmeSIsImRhdGEiLCJzb3VyY2VNYXBwaW5nIiwic3R5bGVzSW5ET00iLCJnZXRJbmRleEJ5SWRlbnRpZmllciIsImlkZW50aWZpZXIiLCJyZXN1bHQiLCJtb2R1bGVzVG9Eb20iLCJpZENvdW50TWFwIiwiaWRlbnRpZmllcnMiLCJiYXNlIiwiY291bnQiLCJpbmRleEJ5SWRlbnRpZmllciIsIm9iaiIsImNzcyIsInNvdXJjZU1hcCIsInJlZmVyZW5jZXMiLCJ1cGRhdGVyIiwiYWRkRWxlbWVudFN0eWxlIiwiYnlJbmRleCIsInNwbGljZSIsImFwaSIsImRvbUFQSSIsInVwZGF0ZSIsIm5ld09iaiIsInJlbW92ZSIsImxhc3RJZGVudGlmaWVycyIsIm5ld0xpc3QiLCJpbmRleCIsIm5ld0xhc3RJZGVudGlmaWVycyIsIl9pIiwiX2luZGV4IiwibWVtbyIsImluc2VydCIsInN0eWxlIiwidGFyZ2V0Iiwic3R5bGVUYXJnZXQiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJ3aW5kb3ciLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnREb2N1bWVudCIsImhlYWQiLCJlIiwiZ2V0VGFyZ2V0IiwiRXJyb3IiLCJhcHBlbmRDaGlsZCIsImVsZW1lbnQiLCJjcmVhdGVFbGVtZW50Iiwic2V0QXR0cmlidXRlcyIsImF0dHJpYnV0ZXMiLCJzdHlsZUVsZW1lbnQiLCJub25jZSIsInNldEF0dHJpYnV0ZSIsImluc2VydFN0eWxlRWxlbWVudCIsInN0eWxlVGFnVHJhbnNmb3JtIiwiYXBwbHkiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJyZW1vdmVTdHlsZUVsZW1lbnQiLCJzdHlsZVNoZWV0IiwiY3NzVGV4dCIsImZpcnN0Q2hpbGQiLCJjcmVhdGVUZXh0Tm9kZSIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsIl9fd2VicGFja19tb2R1bGVzX18iLCJtIiwibiIsImdldHRlciIsImQiLCJhIiwiZGVmaW5pdGlvbiIsImtleSIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJnIiwiZ2xvYmFsVGhpcyIsIkZ1bmN0aW9uIiwicHJvcCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsInNjcmlwdFVybCIsImltcG9ydFNjcmlwdHMiLCJsb2NhdGlvbiIsImN1cnJlbnRTY3JpcHQiLCJzcmMiLCJzY3JpcHRzIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJwIiwiYiIsImJhc2VVUkkiLCJzZWxmIiwiaHJlZiIsIm5jIiwibG9jYWxzIiwidHlwZSIsImNsYXNzbmFtZSIsImVsZSIsImNsYXNzTGlzdCIsImFkZCIsInRleHQiLCJ0ZXh0Q29udGVudCIsImltYWdlU291cmNlIiwiaW1nIiwiY2FwVHlwZSIsImxpbmsiLCJzcGFuIiwid29yZCIsInRvVXBwZXJDYXNlIiwic3Vic3RyaW5nIiwidG9Mb3dlckNhc2UiLCJhZGRyZXNzT2JqIiwiYWRkcmVzcyIsImNhcEtleSIsImgyIiwiaGVhZGluZyIsInJldmlld0FydGljbGUiLCJyZXZpZXdlciIsImltYWdlIiwiZm9vdGVyIiwiY2l0ZSIsImRlc2NMaXN0IiwidGl0bGUiLCJkZXNjT2JqIiwiZGl2IiwiZGwiLCJkdCIsImRkIiwiYXBwZW5kIiwibW9uZGF5IiwidHVlc2RheSIsIndlZG5lc2RheSIsInRodXJzZGF5IiwiZnJpZGF5Iiwic2F0dXJkYXkiLCJzdW5kYXkiLCJjaXR5Iiwic3RhdGUiLCJ6aXAiLCJ0ZWwiLCJlbWFpbCIsIm1lbnVPYmoiLCJzZWN0aW9ucyIsImNhdGVnb3J5Iiwic2VjdGlvbiIsImNhdGVnb3J5SGVhZGVyIiwiZm9yRWFjaCIsImFydGljbGUiLCJpdGVtSGVhZGluZyIsIml0ZW1EZXNjIiwiZGVzYyIsIml0ZW1QcmljZSIsInByaWNlIiwiYmV2ZXJhZ2VzIiwic2lkZXMiLCJtYWlucyIsIm1haW4iLCJuYXYiLCJuYXZCdXR0b25zIiwicXVlcnlTZWxlY3RvckFsbCIsImFkZEV2ZW50TGlzdGVuZXIiLCJldmVudCIsInRhZ05hbWUiLCJjbGlja2VkQnRuIiwiYnV0dG9uSWQiLCJidG4iLCJpbm5lckhUTUwiLCJyb2xlIiwiZW1wbG95ZWUiXSwic291cmNlUm9vdCI6IiJ9